// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
  email         String      @unique
  password      String
  name          String?
  username      String      @unique
  conditions    Boolean?
  newsletter    Boolean?
  bio           String?     @db.VarChar(1000)
  phone         String?
  avatar        String?
  birthday      DateTime?
  address       String?
  city          String?
  country       String?
  postalCode    String?
  role          Role?       @relation("userRole", fields: [roleId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  roleId        String?
  tokens        Token[]     @relation("userToken")
  permissions   UserPermission[] @relation("userUserPermission")
  verified      Boolean     @default(false)
  config        UserConfig?   @relation("userConfig", fields: [configId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  configId      String? @unique
}

model UserConfig {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  userId        String    @unique
  user          User?     @relation("userConfig")
  language      String    @default("en")
  theme         String    @default("light")
  currency      String    @default("USD")
  timezone      String    @default("UTC")
  dateFormat    String    @default("YYYY-MM-DD")
  timeFormat    String    @default("HH:mm:ss")
  numberFormat  String    @default("0,0.00")
}

model Token {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt
  lastUsed      DateTime?
  token         String   @unique @db.VarChar(300)
  expiration    DateTime
  name          String?
  user          User     @relation("userToken", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String
  active        Boolean  @default(true)
}

model Role {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt
  name              String   @unique
  users             User[]   @relation("userRole")
  priorityOrder     Int?
  permissions       RolePermission[] @relation("permissionRolePermission")
}

model Permission {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  code              String    @unique
  description       String?
  module            Module    @relation("modulePermission", fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  moduleId          String
  roles             RolePermission[] @relation("roleRolePermission")
  users             UserPermission[] @relation("userPermission")
}

model RolePermission {
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt
  role              Role    @relation("permissionRolePermission", fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId            String  
  permission        Permission @relation("roleRolePermission", fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId      String
  allowed           Int      @default(0)

  @@id([roleId, permissionId])
  @@unique(fields: [roleId, permissionId], name: "rolePermissionIds")
}

model Module {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt
  name              String   @unique
  permissions       Permission[] @relation("modulePermission")
}

model UserPermission {
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt
  user              User     @relation("userUserPermission", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  permission        Permission @relation("userPermission", fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permissionId      String
  allowed           Int      @default(0)

  @@id([userId, permissionId])
  @@unique(fields: [userId, permissionId], name: "userPermissionIds")
}